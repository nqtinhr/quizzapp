import { logoutUserAPI, refreshTokenAPI } from '@/redux/authSlice'
import { AppDispatch, RootState } from '@/redux/store'
import { clearUser } from '@/redux/userSlice'
import { ITokenPayload } from '@/types/auth'
import { interceptorLoadingElements } from '@/utils/formatters'
import { Store } from '@reduxjs/toolkit'
import axios, { AxiosResponse, InternalAxiosRequestConfig } from 'axios'
import { toast } from 'react-toastify'

/**
 * Kh√¥ng th·ªÉ import { store } from '~/redux/store' theo c√°ch th√¥ng th∆∞·ªùng ·ªü ƒë√¢y
 * Gi·∫£i ph√°p: Inject store l√† k·ªπ thu·∫≠t khi c·∫ßn s·ª≠ d·ª•ng bi·∫øn redux store ·ªü c√°c file ngo√†i ph·∫°m vi component nh∆∞ file axiosInstance hi·ªán t·∫°i
 * Hi·ªÉu ƒë∆°n gi·∫£n: Khi ·ª©ng d·ª•ng b·∫Øt ƒë·∫ßu ch·∫°y l√™n, code s·∫Ω ch·∫°y v√†o main.jsx ƒë·∫ßu ti√™n, t·ª´ b√™n ƒë√≥ ch√∫ng ta g·ªçi
 * h√†m injectStore ngay l·∫≠p t·ª©c ƒë·ªÉ g√°n bi·∫øn mainStore v√†o bi·∫øn axiosReduxStore c·ª•c b·ªô trong file n√†y.
 * https://redux.js.org/faq/code-structure#how-can-i-use-the-redux-store-in-non-component-files
 */
let axiosReduxStore: Store<RootState>
export const injectStore = (mainStore: Store<RootState>) => {
  axiosReduxStore = mainStore
}

const axiosInstance = axios.create({
  baseURL: 'http://localhost:3000',
  headers: {
    'Content-Type': 'application/json'
  },
  timeout: 1000 * 60 * 10, // 10 minutes
  withCredentials: true
})

// Interceptor Request: Can thi·ªáp v√†o gi·ªØa nh·ªØng c√°i request API
axiosInstance.interceptors.request.use(
  function (config: InternalAxiosRequestConfig) {
    // K·ªπ thu·∫≠t ch·∫∑n spam click
    interceptorLoadingElements(true)

    // L·∫•y accessToken t·ª´ store.
    const accessToken = axiosReduxStore.getState().auth.accessToken

    if (accessToken) {
      // C·∫ßn th√™m "Bearer " v√¨ ch√∫ng ta n√™n tu√¢n th·ªß theo ti√™u chu·∫©n OAuth 2.0 trong vi·ªác x√°c ƒë·ªãnh lo·∫°i token ƒëang s·ª≠ d·ª•ng
      // Bearer l√† ƒë·ªãnh nghƒ©a lo·∫°i token d√†nh cho vi·ªác x√°c th·ª±c v√† ·ªßy quy·ªÅn, tham kh·∫£o c√°c lo·∫°i token kh√°c nh∆∞: Basic token, Digest token, OAuth token, ....vv
      config.headers.Authorization = `Bearer ${accessToken}`
    }

    return config
  },
  function (error) {
    return Promise.reject(error)
  }
)
// Kh·ªüi t·∫°o m·ªôt c√°i promise cho vi·ªác g·ªçi api refresh_token
// M·ª•c ƒë√≠ch t·∫°o Promise n√†y ƒë·ªÉ khi n√†o g·ªçi api refresh_token xong xu√¥i th√¨ m·ªõi retry l·∫°i nhi·ªÅu api b·ªã l·ªói tr∆∞·ªõc ƒë√≥.
let refreshTokenPromise: any = null

// Interceptor Response: Can thi·ªáp v√†o gi·ªØa nh·ªØng c√°i response nh·∫≠n v·ªÅ
axiosInstance.interceptors.response.use(
  function (response: AxiosResponse) {
    interceptorLoadingElements(false)
    return response.data
  },
  function (error) {
    const currentRefreshToken = axiosReduxStore.getState().auth.refreshToken

    interceptorLoadingElements(false)

    /* X·ª≠ l√Ω Refresh Token t·ª± ƒë·ªông */
    // Tr∆∞·ªùng h·ª£p 1: N·∫øu nh∆∞ nh·∫≠n m√£ 401 t·ª´ BE, th√¨ g·ªçi api ƒëƒÉng xu·∫•t lu√¥n
    if (error?.response?.status === 401) {
      ;(axiosReduxStore.dispatch as AppDispatch)(logoutUserAPI({ refreshToken: currentRefreshToken })).then(() => {
        axiosReduxStore.dispatch(clearUser())
      })
    }

    // Tr∆∞·ªùng h·ª£p 2: N·∫øu nh∆∞ nh·∫≠n m√£ 410 t·ª´ BE, th√¨ s·∫Ω g·ªçi api refresh token ƒë·ªÉ l√†m m·ªõi l·∫°i accessToken
    // ƒê·∫ßu ti√™n l·∫•y ƒë∆∞·ª£c c√°c request API ƒëang b·ªã l·ªói th√¥ng qua error.config
    const originalRequest = error.config
    console.log('originalRequest: ', originalRequest)
    if (error.response?.status === 410 && !originalRequest._retry) {
      // C·∫ßn th√™m m·ªôt gi√° tr·ªã _retry = true trong kho·∫£ng th·ªùi gian ch·ªù, ƒë·∫£m b·∫£o vi·ªác refresh token n√†y
      // ch·ªâ lu√¥n g·ªçi 1 l·∫ßn t·∫°i 1 th·ªùi ƒëi·ªÉm (nh√¨n t·∫°i ƒëi·ªÅu ki·ªán if ngay ph√≠a tr√™n)
      originalRequest._retry = true

      if (!refreshTokenPromise) {
        refreshTokenPromise = (axiosReduxStore.dispatch as AppDispatch)(
          refreshTokenAPI({ refreshToken: currentRefreshToken })
        )
          .unwrap()
          .then((data) => {
            // ƒë·ªìng th·ªùi accessToken ƒë√£ n·∫±m trong httpOnly cookie (x·ª≠ l√Ω t·ª´ ph√≠a BE)
            return {
              accessToken: data?.accessToken,
              refreshToken: data?.refreshToken
            }
          })
          .catch((_error) => {
            console.log('‚ùå Refresh token th·∫•t b·∫°i')
            const latestRefreshToken = axiosReduxStore.getState().auth.refreshToken
            // N·∫øu nh·∫≠n b·∫•t k·ª≥ l·ªói n√†o t·ª´ api refresh token th√¨ c·ª© logout lu√¥n
            ;(axiosReduxStore.dispatch as AppDispatch)(logoutUserAPI({ refreshToken: latestRefreshToken })).then(() => {
              axiosReduxStore.dispatch(clearUser())
            })
            return Promise.reject(_error)
          })
          .finally(() => {
            // D√ô API c√≥ ok hay l·ªói th√¨ v·∫´n lu√¥n g√°n l·∫°i c√°i refreshTokenPromise v·ªÅ null nh∆∞ ban ƒë·∫ßu
            refreshTokenPromise = null
          })
      }

      // C·∫ßn return tr∆∞·ªùng h·ª£p refreshTokenPromise ch·∫°y th√†nh c√¥ng v√† x·ª≠ l√Ω th√™m ·ªü ƒë√¢y:
      return refreshTokenPromise.then((data: ITokenPayload) => {
        const { accessToken, refreshToken } = data
        console.log(`üöÄ ~ TokenPayload:`, { accessToken, refreshToken })
        /**
         * B∆∞·ªõc 1: ƒê·ªëi v·ªõi Tr∆∞·ªùng h·ª£p n·∫øu d·ª± √°n c·∫ßn l∆∞u accessToken v√†o Localstorage ho·∫∑c ƒë√¢u ƒë√≥ th√¨ s·∫Ω vi·∫øt th√™m code x·ª≠ l√Ω ·ªü ƒë√¢y.
         * V√≠ d·ª•: axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`
         * Hi·ªán t·∫°i ·ªü ƒë√¢y kh√¥ng c·∫ßn b∆∞·ªõc 1 n√†y v√¨ ch√∫ng ta ƒë√£ ƒë∆∞a accessToken v√†o cookie (x·ª≠ l√Ω t·ª´ ph√≠a BE) sau khi api refreshToken ƒë∆∞·ª£c g·ªçi th√†nh c√¥ng.
         */

        // B∆∞·ªõc 2: B∆∞·ªõc Quan tr·ªçng: Return l·∫°i axios instance c·ªßa ch√∫ng ta k·∫øt h·ª£p c√°c originalRequests ƒë·ªÉ g·ªçi l·∫°i nh·ªØng api ban ƒë·∫ßu b·ªã l·ªói
        return axiosInstance(originalRequest)
      })
    }
    // X·ª≠ l√Ω t·∫≠p trung ph·∫ßn hi·ªÉn th·ªã th√¥ng b√°o l·ªói tr·∫£ v·ªÅ t·ª´ m·ªçi API ·ªü ƒë√¢y (vi·∫øt code m·ªôt l·∫ßn: Clean Code)
    // console.log error ra l√† s·∫Ω th·∫•y c·∫•u tr√∫c data d·∫´n t·ªõi message l·ªói nh∆∞ d∆∞·ªõi ƒë√¢y
    let errorMessage = error?.message
    const responseMessage = error?.response?.data?.message

    if (responseMessage) {
      if (Array.isArray(responseMessage)) {
        errorMessage = responseMessage.map((item) => item.error).join(', ')
      } else if (typeof responseMessage === 'string') {
        errorMessage = responseMessage
      }
    }

    // D√πng toastify ƒë·ªÉ hi·ªÉn th·ªã b·∫•t k·ªÉ m·ªçi m√£ l·ªói l√™n m√†n h√¨nh ‚Äì Ngo·∫°i tr·ª´ m√£ 410 ‚Äì GONE ph·ª•c v·ª• vi·ªác t·ª± ƒë·ªông refresh l·∫°i token.
    if (error?.response?.status !== 410) {
      toast.error(errorMessage)
    }

    return Promise.reject(error)
  }
)

export default axiosInstance
